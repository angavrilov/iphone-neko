/*
 *  NekoML Compiler
 *  Copyright (c)2005 Nicolas Cannasse
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

open Neko.Ast;
open Nekoml.Type;

type comparison {
	Native;
	Structural;
}

type context {
	module_name : string;
	mutable counter : int;
	mutable refvars : string Set.t;
}

var null_pos = Lexer.null_pos

function gen_label(ctx) {
	var c = ctx.counter;
	ctx.counter := ctx.counter + 1;
	"l" + string c
}

function gen_variable(ctx) {
	var c = ctx.counter;
	ctx.counter := ctx.counter + 1;
	"v" + string c
}

function module_name(m) {
	"@" + String.concat "_" m
}

function builtin(name) {
	(EConst (Builtin name) , null_pos)
}

function ident(name) {
	(EConst (Ident name) , null_pos)
}

function int(n) {
	(EConst (Int n) , null_pos)
}

var enull = (EConst Null , null_pos)

function core(s,p) {
	(EField (EConst Ident(module_name ["Core"]),p) s , p)
}

function rec is_fun(t) {
	match t.texpr {
	| TNamed (_,_,t) | TLink t -> is_fun t
	| TPoly
	| TMono _
	| TFun _ -> true
	| _ -> false
	}
}

function rec call(ret,f,args,p) {
	match fst f {
	| EConst (Builtin _) -> (ECall f args, p)
	| _ ->
		match args {
		| a :: b :: c :: d :: x :: l ->
			var app = ECall (EConst (Builtin "apply"),p) [f;a;b;c;d];
			call ret (app,p) (x :: l) p
		| _ ->
			if is_fun ret then
				(ECall (EConst (Builtin "apply"),p) (f :: args) , p)
			else
				(ECall f args , p)
		}
	}
}

function array(args,p) {
	(ECall (EConst (Builtin "array"),p) args , p)
}

function block(e) {
	match fst e {
	| EBlock _ -> e
	| _ -> (EBlock [e] , snd e)
	}
}

function rec arity(t) {
	match t.texpr {
	| TAbstract -> 0
	| TTuple tl -> List.length tl
	| TLink t -> arity t
	| _ -> 1
	}
}

function comparison(t) {
	match tlinks true t {
	| TNamed (["int"],[],_)
	| TNamed (["char"],[],_)
	| TNamed (["float"],[],_)
	| TNamed (["string"],[],_) -> Native
	| _ -> Structural
	}
}

function rec gen_constant(ctx,c,p) {
	(match c {
	| TVoid -> EConst Null
	| TInt n when n < 0 -> EBinop "-" int(0) int(-n)
	| TInt n -> EConst (Int n)
	| TFloat s -> EConst (Float s)
	| TChar c -> EConst Int(ord c)
	| TString s -> EConst (String s)
	| TIdent s ->
		if Set.exists ctx.refvars s then EArray (EConst (Ident s),null_pos) int(0) else EConst (Ident s)
	| TBool b -> EConst (if b then True else False)
	| TConstr "[]" | TModule (["Core"],TConstr "[]") -> fst (core "@empty" p)
	| TConstr "::" | TModule (["Core"],TConstr "::") -> fst (core "@cons" p)
	| TConstr s -> EConst (Ident s)
	| TModule ([],c) -> fst (gen_constant ctx c p)
	| TModule (m,c) ->		
		EField (EConst Ident(module_name(m)),p) (match c { TConstr x -> x | TIdent s -> s | _ -> assert()})
	} , p)
}

type match_context {
	ctx : context;	
	out : string;
	pos : pos;
	mutable cache : (match_op , string) list;
	mutable next : string;
	mutable first : bool;
}

var no_label = "<assert>"

function rec gen_match_rec(mctx,fail,m) {
	try
		ident (List.phys m mctx.cache)
	catch { Not_found ->
	var p = mctx.pos;
	var ctx = mctx.ctx;
	var gen_rec = gen_match_rec mctx;
	match m {
	| MFailure ->
		var label = if mctx.first && mctx.next != no_label then mctx.next else fail;
		if label == no_label then
			(EBlock [] , p)
		else
			call t_void (builtin "goto") [ident label] p
	| MHandle (m1,m2) ->
		var label = gen_label ctx;
		var m1 = gen_rec label m1;
		var m2 = gen_rec fail m2;
		(EBlock [m1; (ELabel label, p); m2] , p)
	| MRoot ->
		assert()
	| MExecute (e,b) ->
		if !b then {
			var ematch = (EBinop "==" ident("@exc") core("Stream_matching",p) , p);
			var reraise = (EIf ematch gen_rec(fail,MFailure) Some((ECall (builtin "throw") [ident "@exc"],p)) , p);
			mctx.first := false;
			match e.edecl {
			| TConst _ -> gen_expr ctx e
			| _ -> (ETry gen_expr(ctx,e) "@exc" reraise , p)
			}
		} else {
			mctx.first := true;
			var out = call t_void (builtin "goto") [ident mctx.out] p;
			(EBlock [gen_expr ctx e;out] , p)
		}		
	| MConstants (m,[(TIdent v,m1)]) ->
		var m = gen_rec fail m;
		(EBlock [
			(EVars [(v, Some m)] , p);
			gen_rec fail m1
		] , p)
	| MConstants (m,cl) ->
		var e = gen_rec fail m;
		var v = gen_variable ctx;
		var exec = List.fold (function(acc,(c,m)) {
			var test = (EBinop "==" ident(v) gen_constant(ctx,c,p) , p);
			var exec = gen_rec fail m;
			(EIf test exec Some(acc) , p)
		}) (gen_rec fail MFailure) (List.rev cl);
		(EBlock [
			(EVars [(v, Some e)] , p);
			exec
		] , p)
	| MRecordField (m,f) ->
		(EField gen_rec(fail,m) f , p)
	| MTuple (m,n) ->
		(EArray gen_rec(fail,m) int(n) , p)
	| MField (m,n) ->
		(EArray gen_rec(fail,m) int(n + 2) , p)
	| MNext (m1,m2) ->
		var old = mctx.next;
		var label = gen_label ctx;
		mctx.next := label;
		var m1 = gen_rec fail m1;
		mctx.next := old;
		var m2 = gen_rec fail m2;
		(EBlock [m1; (ELabel label, p); m2] , p)
	| MSwitch (m,cl) ->
		var e = gen_rec fail m;
		var v = gen_variable ctx;
		var exec = List.fold (function(acc,(c,m)) {
			var test = (EBinop "==" ident(v) gen_constant(ctx,c,p) , p);
			var exec = gen_rec fail m;
			(EIf test exec Some(acc) , p)
		}) (gen_rec fail MFailure) (List.rev cl);
		(EBlock [
			(EVars [(v, Some (EArray e int(0),p))] , p);
			exec;
		] , p)
	| MBind (v,m1,m2) ->
		var e1 = gen_rec fail m1;
		var old = mctx.cache;
		mctx.cache := (m1,v) :: mctx.cache;
		var e2 = gen_rec fail m2;
		mctx.cache := old;
		(EBlock [(EVars [(v, Some e1)] , p); e2] , p)
	| MWhen (e,m) ->
		var e = gen_expr ctx e;
		var m = gen_rec fail m;
		var fail = gen_rec fail MFailure;
		(EIf e m Some(fail), p)
	| MToken (m,n) ->
		call t_void (core "stream_token" p) [gen_rec fail m; int n] p
	| MJunk (m,n,m2) ->
		var m = gen_rec fail m;
		mctx.first := false;
		(EBlock [
			call t_void (core "stream_junk" p) [m; int n] p;
			gen_rec fail m2
		] , p)
	}
	}
}

function rec gen_matching(ctx,v,m,p,stream,out) {
	var mctx = {
		ctx = ctx;
		cache = [(MRoot,v)];
		pos = p;
		out = out;
		first = stream;
		next = no_label;
	};
	var label = (if stream then gen_label ctx else no_label);	
	var e = gen_match_rec mctx label m;
	if stream then {
		var vpos = gen_variable ctx;
		var stream_pos = (ECall core("stream_pos",p) [ident v] , p);
		var test = (EBinop "==" ident(vpos) stream_pos , p);
		var exc = (ECall builtin("throw") [(EIf test core("Stream_matching",p) Some(core "Stream_error" p), p)] , p);
		(EBlock [(EVars [(vpos , Some stream_pos)] , p); e; (ELabel label , p); exc] , p)
	} else
		e
}

function rec gen_match(ctx,e,m,stream,p) {
	var out = gen_label ctx;
	var v = gen_variable ctx;	
	var m = gen_matching ctx v m p stream out;
	var m = (ENext (EVars [(v,Some e)],p) m, p);
	(EBlock [m; (ELabel out , p)] , p)
}

function rec gen_constructor(ctx,tname,c,t,p) {
	var field = ident c;
	var printer = (EConst Ident(tname + "__string"), p);
	function val_type(t) {
		match arity t {
		| 0 ->
			var make = array [enull;printer] p;
			(ENext (EBinop "="  field make , p) (EBinop "=" (EArray field int(0),p) field , p) , p)
		| n ->
			var args = Array.list (Array.init n (function(n) { "p" + string n }));
			var build = array (field :: printer :: List.map (function(a) { (EConst (Ident a) , p) }) args) p;
			var func = (EFunction args (EBlock [(EReturn (Some build),p)] , p) , p);
			(EBinop "=" field func , p)
		}
	}
	var export = (EBinop "=" (EField ident(ctx.module_name) c,p) field , p);
	(ENext val_type(t) export , p)
}

function rec gen_type_printer(ctx,c,t) {
	var printer = mk TConst(TModule ["Core"] TIdent("@print_union")) t_void null_pos;
	var e = mk (TCall printer [
		mk TConst(TString c) t_string null_pos;
		mk TConst(TIdent "v") t_void null_pos
	]) t_string null_pos;
	e
}

function rec gen_type(ctx,name,t,p) {
	match t.texpr {
	| TAbstract
	| TMono _
	| TPoly
	| TRecord _
	| TTuple _
	| TFun _
	| TNamed (_,_,{ texpr = TNamed _ }) ->
		(EBlock [] , p)
	| TLink t ->
		gen_type ctx name t p
	| TNamed (name,_,t) ->
		function rec loop(l) {
			match l {
			| [] -> assert()
			| [x] -> x
			| _ :: l -> loop l
			}
		}
		gen_type ctx (loop name) t p
	| TUnion (_,constrs) ->
		var cmatch = gen_match ctx (ident "v") (MSwitch MRoot (List.map (function((c,t)) {
			var e = gen_type_printer ctx c t;
			(TConstr c , MExecute e true)
		}) constrs)) false p;
		var printer = (EFunction ["v"] cmatch , p);
		var regs = List.map (function((c,t)) { gen_constructor ctx name c t p }) constrs;
		(EBlock ((EVars [(name + "__string",Some printer)],p) :: regs) , p)
	}
}

function rec gen_binop(ctx,op,e1,e2,p) {
	function compare(op) {
		var cmp = (ECall (core "@compare" p) [gen_expr ctx e1; gen_expr ctx e2] , p);
		(EBinop op cmp int(0) , p)
	}
	function make(op) {
		(EBinop op gen_expr(ctx,e1) gen_expr(ctx,e2) , p)
	}
	function builtin2(op) {
		(ECall (builtin op) [gen_expr ctx e1; gen_expr ctx e2] , p)
	}
	match op {
	| "and" -> make "&"
	| "or" -> make "|"
	| "xor" -> make "+"
	| "==" | "!=" | ">" | "<" | ">=" | "<=" ->
		match comparison e1.etype {
		| Structural -> compare op
		| Native -> make op
		}
	| "===" -> (EBinop "==" builtin2("pcompare") int(0) , p)
	| "!==" -> (EBinop "!=" builtin2("pcompare") int(0) , p)
	| ":=" ->
		match e1.edecl {
		| TField _ -> make "="
		| TArray (a,i) ->
			(ECall core("@aset",p) [gen_expr ctx a; gen_expr ctx i; gen_expr ctx e2] , p)
		| _ ->
			(EBinop "=" (EArray gen_expr(ctx,e1) int(0),e1.epos) gen_expr(ctx,e2) , p)
		}
	| _ ->
		make op
	}
}

function rec gen_expr(ctx,e) {
	var p = e.epos;
	var e = match e.edecl {
	| TConst c -> fst (gen_constant ctx c p)
	| TBlock el -> EBlock (gen_block ctx el p)
	| TParenthesis e -> EParenthesis (gen_expr ctx e)
	| TCall ({ edecl = TConst (TIdent "neko") },[{ edecl = TConst (TString s) }])
	| TCall ({ edecl = TConst (TModule ([],TIdent "neko")) },[{ edecl = TConst (TString s) }])
	| TCall ({ edecl = TConst (TModule (["Core"],TIdent "neko")) },[{ edecl = TConst (TString s) }]) ->
		var ch = IO.read_string (String.concat "\"" (String.split s "'"));
		var file = "neko@" + p.psource;
		var lex = Lexer.create Buffer.create();
		Lexer.input lex file ch p.pline p.pmin;
		fst (Neko.Parser.parse lex)
	| TCall (f,el) -> fst (call e.etype (gen_expr ctx f) (List.map (gen_expr ctx) el) p)
	| TField (e,s) -> EField gen_expr(ctx,e) s
	| TArray (e1,e2) ->
		ECall core("@aget",p) [gen_expr ctx e1;gen_expr ctx e2]
	| TVar ([v],e) ->
		ctx.refvars := Set.remove ctx.refvars v;
		EVars [(v , Some (gen_expr ctx e))]
	| TVar (vl,e) ->
		var n = &(-1);
		EVars (("@tmp" , Some (gen_expr ctx e)) :: List.map (function(v) {
			ctx.refvars := Set.remove ctx.refvars v;
			n := *n + 1;
			(v , Some (EArray ident("@tmp") int(*n),p))
		}) vl)
	| TIf (e,e1,e2) -> EIf (gen_expr ctx e) (gen_expr ctx e1) (match e2 { None -> None | Some e2 -> Some (gen_expr ctx e2) })
	| TWhile (e1,e2) -> EWhile (gen_expr ctx e1) (gen_expr ctx e2) NormalWhile
	| TFunction (rflag,name,params,code) ->
		if name == "_" then
			EFunction (List.map fst params) block(gen_expr ctx code)
		else if !rflag then
			EVars [(name , Some (EFunction (List.map fst params) block(gen_expr ctx code), p))]
		else
			EBlock [gen_functions ctx [e] p]		
	| TBinop (op,e1,e2) -> fst (gen_binop ctx op e1 e2 p)
	| TTupleDecl tl -> fst (array (List.map (gen_expr ctx) tl) p)
	| TTypeDecl t -> fst (gen_type ctx "<assert>" t p)
	| TMut e -> fst (gen_expr ctx (*e))
	| TRecordDecl fl ->
		EObject (("__string", core "@print_record" p) :: List.map (function((s,e)) { (s , gen_expr ctx e) }) fl)
	| TListDecl el ->
		fst (match el {
		| [] -> array [] p
		| x :: l ->
			array [gen_expr ctx x; gen_expr ctx (mk TListDecl(l) e.etype p)] p
		})
	| TUnop (op,e) ->
		match op {
		| "-" -> EBinop "-" int(0) gen_expr(ctx,e)
		| "*" -> EArray gen_expr(ctx,e) int(0)
		| "!" -> fst (call t_void (builtin "not") [gen_expr ctx e] p)
		| "&" -> fst (array [gen_expr ctx e] p)
		| _ -> assert()
		}
	| TMatch (e,m,stream) ->
		fst (gen_match ctx (gen_expr ctx e) m stream p)
	| TTupleGet (e,n) ->
		EArray (gen_expr ctx e) int(n)
	| TErrorDecl (e,t) ->
		var printer = gen_expr ctx (gen_type_printer ctx e t);
		var printer = (EFunction ["v"] (EBlock [printer],p) , p);
		var printer = (EVars [(e + "__string",Some printer)] , p);
		ENext printer (gen_constructor ctx e e t p)
	| TTry (e,m) ->
		var out = gen_label ctx;
		var matching = gen_matching ctx "@exc" m p false out;
		var reraise = call t_void (builtin "throw") [ident "@exc"] p;
		var handle = (EBlock [matching;reraise;(ELabel out , p)] , p);
		ETry (gen_expr ctx e) "@exc" handle
	};
	(e,p)
}

function rec gen_functions(ctx,fl,p) {
	var ell = &(EVars (List.map (function(e) {
		match e.edecl {
		| TFunction (_,"_",params,e) ->
			("_" , Some (EFunction (List.map fst params) block(gen_expr ctx e),p))
		| TFunction (_,name,_,_) ->
			ctx.refvars := Set.add ctx.refvars name;
			(name , Some (array [enull] null_pos))
		| _ ->			
			assert()
		}
	}) fl) , null_pos);
	List.iter (function(e) {
		var p = e.epos;
		match e.edecl {
		| TFunction (_,name,params,e) ->
			if name != "_" then {
				var e = gen_expr ctx e;
				var e = (EFunction (List.map fst params) block(e) , p);
				var e = (EBinop "=" (EArray ident(name) int(0),p) e, p);
				var e = (EBlock [e; (EBinop "=" ident(name) (EArray ident(name) int(0),p) , p)] , p);
				ell := (ENext (*ell) e , p);
				ctx.refvars := Set.remove ctx.refvars name;
			}
		| _ ->
			assert()
		}
	}) fl;
	*ell
}

function rec gen_block(ctx,el,p) {
	var old = ctx.refvars;
	var ell = &[];
	function rec loop(fl,l) {
		match l {
		| [] -> if fl != [] then ell := gen_functions ctx (List.rev fl) p :: *ell
		| ({ edecl = TFunction (true,name,p,f) } as e) :: l -> loop (e :: fl) l
		| { edecl = TMut r } :: l -> loop fl ((*r) :: l)
		| x :: l ->
			if fl != [] then ell := gen_functions ctx (List.rev fl) p :: *ell;
			ell := gen_expr ctx x :: *ell;
			loop [] l
		}
	}	
	loop [] el;
	ctx.refvars := old;
	List.rev (*ell)
}

function generate(e,deps,idents,mod) {
	var m = module_name mod;
	var ctx = {
		module_name = m;
		counter = 0;
		refvars = Set.empty();
	};
	var init = (EBinop "=" ident(m) builtin("exports") , null_pos);
	var deps = List.map (function(m) {
		var file = String.concat "/" m;
		var load = (ECall (EField builtin("loader") "loadmodule",null_pos) [gen_constant ctx (TString file) null_pos;builtin "loader"] , null_pos);
		(EBinop "=" ident(module_name m) load , null_pos)
	}) deps;
	var exports = List.map (function(i) {
		(EBinop "=" (EField builtin("exports") i,null_pos) ident(i) , null_pos)
	}) idents;
	match gen_expr ctx e {
	| (EBlock e , p) -> (EBlock (List.append (init :: deps) (List.append e  exports)) , p)
	| e -> (EBlock (List.append (init :: deps) (e :: exports)) , null_pos)
	}
}
