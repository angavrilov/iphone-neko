type void;
type int;
type float;
type char;
type string;
type error;
type 'a array;
type 'a ref;
type 'a format;

type 'a option {
	None;
	Some : 'a;
}

exception Invalid_argument : string;
exception Assert_failure : (string,int);
exception Error : string;
exception Not_found;

/* -----

theses are defined directly in the compiler
because they need additional magic.

type bool {
	true;
	false;
}

type 'a list {
	[];
	:: : ('a  , 'a list);
}

val neko : string -> 'a

----- */

neko("

	@sprintf = $loader.loadprim('std2@sprintf',2);

	@string = function(x) {
		// constructor
		if( $typeof(x[1]) == $tfunction )
			return x[1](x);
		// tuples
		if( $typeof(x) == $tarray ) {
			var s = '(';
			var l = $asize(x);
			var i = 0;
			while i < l {
				s = s + @string(x[i]);
				i = i + 1;
				if i < l 
					s = s + ', ';
			}
			s = s + ')';
			return s;
		}
		// others
		return $string(x);
	}

	$exports.@print_record = function() {
		var o = $objfields(this);
		var s = '{ ';
		var i = 0;
		var l = $asize(o) - 1;
		while i < l {
			var f = o[i];
			var fname = $field(f);
			if fname == '__string'
				l = l + 1;
			else
				s = s + fname + ' = ' + @string($objget(this,f))+'; ';
			i = i + 1;
		}
		s = s + '}';
		s
	}

	$exports.@print_union = function(s,a) {
		var l = $asize(a);
		if l == 2
			return s;
		var i = 2;
		s = s + '(';
		while i < l {
			s = s + @string(a[i]);
			i = i + 1;
			if i < l
				s = s + ', ';
		}
		s = s + ')';
		return s;
	}

	@empty = $array(null,function(_){ '[]' });
	@empty[0] = @empty;
	@cons = function(x,l) {
		$array(@cons,function(c) { @string(c[2]) + ' :: ' + @string(c[3]) },x,l)
	}
	$exports.@cons = @cons;
	$exports.@empty = @empty;
");

function magic(x) {
	neko("x");
}

function throw(x : error) : 'a {
	neko("$throw(x)");	
}

function assert(file,line) {
	throw Assert_failure(file,line)
}

function invalid_arg(fun) : 'a {
	throw Invalid_argument(fun);
}

function error(x : string) {
	throw Error(x)
}

function ignore(x) {
}

{ /* break recursion */ };

function ord(x:char) : int {
	neko("x");
}

function chr(x:int) : char {
	if x < 0 || x > 255 then invalid_arg();
	neko("x");
}

function string(x : 'a) : string {
	neko("@string(x)");
}

function nstring(x : 'a) : string {
	 neko("$string(x)");
}

function print(x) : void {
	neko("$print(string(x))");
}

function nprint(x) : void {
	neko("$print(x)");
}

function compare(x : 'a, y : 'a) : int {
	neko("$compare(x,y)");
}

function min(x,y) {
	if x < y then x else y
}

function max(x,y) {
	if x < y then y else x
}

function sprintf(fmt : 'a format, p : 'a ) : string {
	neko("@sprintf(fmt,p)")
}

function printf(fmt : 'a format, p : 'a ) : void {
	print (sprintf fmt p)
}
