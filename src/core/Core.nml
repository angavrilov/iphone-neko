type void;
type int;
type float;
type char;
type string;
type 'a array;
type 'a ref;

type 'a option {
	None;
	Some : 'a;
}

/* -----

theses are defined directly in the compiler
because they need additional magic.

type bool {
	true;
	false;
}

type 'a list {
	[];
	:: : ('a  , 'a list);
}

val neko : string -> 'a

----- */

neko("
	@empty = $array(null);
	@empty[0] = @empty;
	@cons = function(x,l) {
		$array(@cons,x,l)
	}
	$exports.@cons = @cons;
	$exports.@empty = @empty;
");

function magic(x) {
	neko("x");
}

function string(x) : string {
	neko("$string(x)");
}

function print(x) : void {
	neko("$print(x)");
}

function min(x,y) {
	if x < y then x else y
}

function max(x,y) {
	if x < y then y else x
}
