
// ----------------------------------------------------------------------
// List

List = $new(null);

List.new = function() {
	return $new(@List);
};

@List = $new(null);
@List.l = 0;
@List.h = null;
@List.q = null;

@List.get_length = function() {
	return this.l;
};

@List.add = function(x) {
	var a = $array(x,null);
	if( this.q != null )
		this.q[1] = a;
	else
		this.h = a;
	this.q = a;
	this.l = this.l + 1;
};

@List.push = function(x) {
	var a = $array(x,this.h);
	this.h = a;
	if( this.q == null )
		this.q = a;
	this.l = this.l + 1;
};

list_remove = function(l,cur,prev,x) {
	if( $not(cur) )
		return;
	if( cur[0] == x ) {
		if( prev != null )
			prev[1] = cur[1];
		else {
			if( l.q == l.h )
				l.q = null;
			l.h = cur[1];
		}
		l.l = l.l - 1;
		return true;
	}
	return list_remove(l,cur[1],cur,x);
}

@List.remove = function(x) {
	return list_remove(this,this.h,null,x);
}

list_at = function(cur,p) {
	if( cur == null )
		return null;
	if( $not(p) )
		return cur[0];
	return list_at(cur[1],p-1);
}

@List.at = function(p) {
	return list_at(this.h,p);
}

@List.pop = function() {
	if( this.h == null )
		return null;
	if( this.q == this.h )
		this.q = null;
	var x = this.h[0];
	this.h = this.h[1];
	this.l = this.l - 1;
	return x;
}

@List.first = function() {
	return this.h[0];
}

@List.last = function() {
	return this.q[0];
}

@List.iter = function(f) {
	var p = this.h;
	while( p != null ) {
		f(p[0]);
		p = p[1];
	}
}

@List.find = function(f) {
	var p = this.h;
	while( p != null ) {
		var x = f(p[0]);
		if( x != null )
			return x;
		p = p[1];
	}
	return null;
}

@List.exists = function(f) {
	var p = this.h;
	while( p != null ) {
		if( f(p[0]) )
			return true;
		p = p[1];
	}
	return false;
}

@List.join = function(sep) {
	if( $not(this.l) )
		return String.new("");
	var b = StringBuf.new();
	var p = this.h;
	while( p != null ) {
		b.add(p[0]);
		p = p[1];
		if( p != null )
			b.add(sep);
	}
	return String.new(b.__string());
}

@List.toArray = function() {
	var a = $amake(this.l);
	var p = this.h;
	var n = 0;
	while( p != null ) {
		a[n] = p[0];
		n = n + 1;
		p = p[1];
	}
	return Array.new1(a);
}

@List.toString = function() {
	return String.new(this.__string());
}

@List.__string = function() {
	var b = StringBuf.new();
	var p = this.h;
	b.add("[");
	while( p != null ) {
		b.add(p[0]);
		p = p[1];
		if( p != null )
			b.add(",");
	}
	b.add("]");
	return b.__string();
}

list_copy = function(cur,f,q) {
	var n = cur[1];
	if( n != null )
		return $array(f(cur[0]),list_copy(n,f,q));
	else {
		var last = $array(f(cur[0]),null);
		q[0] = last;
		return last;
	}
}

@List.map = function(f) {
	var l = List.new();
	if( this.h != null ) {
		var q = $array(null);
		l.h = list_copy(this.h,f,q);
		l.q = q[0];
		l.l = this.l;
	}
	return l;
}

$exports.List = List;

// ----------------------------------------------------------------------
// Array

Array = $new(null);

Array.new = function() {
	var o = $new(@Array);
	o.@a = $array();
	return o;
}

Array.new1 = function(a) {
	var o = $new(@Array);
	o.@a = a;
	return o;
}

@Array = $new(null);
@Array.@a = null;

@Array.get_length = function() {
	return $asize(this.@a);
}

@Array.concat = function(a) {
	var l = $asize(this.@a);
	var l2 = $asize(a.@a);
	var a = $array(l+l2);
	$ablit(a,0,this.@a,0,l);
	$ablit(a,l,a.@a,0,l2);
	this.@a = a;
}

@Array.sub = function(s,l) {
	var a = $asub(this.@a,s,l);
	if( a == null )
		return null;
	return Array.new1(a);
}

@Array.sort = function(f) {
	var a = this.@a;
	var i = 0;
	var l = $asize(a);
	while( i < l ) {
		var swap = false;
		var j = 0;
		var max = l - i - 1;
		while( j < max ) {
			if( f(a[j],a[j+1]) > 0 ) {
				var tmp = a[j+1];
				a[j+1] = a[j];
				a[j] = tmp;
				swap = true;
			}
			j = j + 1;
		}
		if( $not(swap) )
			break;
		i = i + 1;
	}
}

@Array.iter = function(f) {
	var i = 0;
	var a = this.@a;
	var l = $asize(a);
	while( i < l ) {
		f(a[i]);
		i = i + 1;
	}
}

@Array.map = function(f) {
	var i = 0;
	var a = this.@a;
	var l = $asize(a);
	var a2 = $amake(l);
	while( i < l ) {
		a2[i] = f(a[i]);
		i = i + 1;
	}
	return Array.new1(a2);
}

@Array.join = function(sep) {
	var i = 0;
	var a = this.@a;
	var l = $asize(a);
	var b = StringBuf.new();
	while( i < l ) {
		b.add(a[i]);
		i = i + 1;
		if( i != l )
			b.add(sep);
	}
	return b.toString();
}

@Array.toList = function() {
	var i = 0;
	var a = this.@a;
	var l = $asize(a);
	var li = List.new();
	while( i < l ) {
		li.add(a[i]);
		i = i + 1;
	}
	return li;
}

@Array.toString = function() {
	return String.new(this.__string());
}

@Array.__string = function() {
	return $string(this.@a);
}

@Array.set = function(p,v) {
	var a = this.@a;
	if( $asize(a) > p )
		return (a[p] = v);
	var a2 = $amake(p+1);
	$ablit(a2,0,a,0,$asize(a));
	this.@a = a2;
	return (a2[p] = v);
}

$exports.Array = Array;

// ----------------------------------------------------------------------
// Hash

Hash = $new(null);

Hash.new = function() {
	var o = $new(@Hash);
	o.@h = $amake(64);
	return o;
}

@Hash = $new(null);
@Hash.@h = null;
@Hash.get = function(k) {
	k = k.@s;
	var l = this.@h[$hash(k) & 63];
	while( l != null ) {
		if( l[0] == k )
			return l[1];
		l = l[2];
	}
	return null;
}

@Hash.set = function(k,v) {
	k = k.@s;
	var p = $hash(k) & 63;
	var l = this.@h[p];
	while( l != null ) {
		if( l[0] == k ) {
			l[1] = v;
			return;
		}
		l = l[2];
	}
	var h = $amake(3);
	h[0] = k;
	h[1] = v;
	h[2] = this.@h[p];
	this.@h[p] = h;
}

@Hash.remove = function(k) {
	k = k.@s;
	var p = $hash(k) & 63;
	var prev = null;
	var l = this.@h[p];
	while( l != null ) {
		if( l[0] == k ) {
			if( prev == null )
				this.@h[p] = l[2];
			else
				prev[2] = l[2];
			return true;
		}
		prev = l;
		l = l[2];
	}
	return false;
}

@Hash.exists = function(k) {
	k = k.@s;
	var l = this.@h[$hash(k) & 63];
	while( l != null ) {
		if( l[0] == k )
			return true;
		l = l[2];
	}
	return false;
}

@Hash.iter = function(f) {
	var i = 0;
	while( i < 64 ) {
		var l = this.@h[i];
		while( l != null ) {
			f(String.new(l[0]),l[1]);
			l = l[2];
		}
		i = i + 1;
	}
}

@Hash.toString = function() {
	return String.new(this.__string());
}

@Hash.__string = function() {
	var s = StringBuf.new();
	var i = 0;
	var first = true;
	s.add("#hash[");
	while( i < 64 ) {
		var h = this.@h[i];
		while( h != null ) {
			if( first )
				first = false;
			else
				s.add(", ");
			s.add(h[0]);
			s.add(" => ");
			s.add(h[1]);
			h = h[2];
		}
		i = i + 1;
	}
	s.add("]");
	return s.__string();
}

$exports.Hash = Hash;

// ----------------------------------------------------------------------
// StringBuf

buffer_alloc = $loader.loadprim("std@buffer_alloc",0);
buffer_add = $loader.loadprim("std@buffer_add",2);
buffer_add_sub = $loader.loadprim("std@buffer_add_sub",4);
buffer_string = $loader.loadprim("std@buffer_string",1);

StringBuf = $new(null);

StringBuf.new = function() {
	var b = $new(@StringBuf);
	b.@b = buffer_alloc();
	return b;
}

@StringBuf = $new(null);
@StringBuf.@b = null;

@StringBuf.add = function(s) {
	buffer_add(this.@b,s);
}

@StringBuf.addSub = function(s,p,l) {
	buffer_add_sub(this.@b,s,p,l);
}

@StringBuf.__string = function() {
	return buffer_string(this.@b);
}

@StringBuf.toString = function() {
	return String.new(this.__string());
}

$exports.StringBuf = StringBuf;

// ----------------------------------------------------------------------
// String

string_split = $loader.loadprim("std@string_split",2);

String = $new(null);

String.new = function(s) {
	if( s == null )
		return null;

	if( $typeof(s) != $tstring )
		s = $string(s);

	var o = $new(@String);
	o.@s = s;
	return o;
}

@String = $new(null);
@String.@s = null;

@String.get_length = function() {
	return $ssize(this.@s);
}

@String.charAt = function(p) {
	return String.new( $ssub(this.@s,p,1) );
}

@String.at = function(p) {
	return $sget(this.@s,p);
}

@String.sub = function(s,l) {
	if( l == null )
		l = $ssize(this.@s) - s;
	return String.new( $ssub(this.@s,s,l) );
}

@String.split = function(s) {
	var a = string_split(this.@s,s.@s);
	var l = List.new();
	while( a != null ) {
		l.add( String.new(a[0]) );
		a = a[1];
	}
	return l;
}

@String.toString = function() {
	return this;
}

@String.__string = function() {
	return this.@s;
}

@String.__compare = function(o) {
	return $compare(this.@s,o.@s);
}

@String.__add = function(s) {
	return String.new(this.@s+$string(s));
}

@String.__radd = function(s) {
	return String.new($string(s)+this.@s);
}

$exports.String = String;


// ----------------------------------------------------------------------
// Date

date_new = $loader.loadprim("std@date_new",1);
date_now = $loader.loadprim("std@date_now",0);
date_set_hour = $loader.loadprim("std@date_set_hour",4);
date_set_day = $loader.loadprim("std@date_set_day",4);
date_get_hour = $loader.loadprim("std@date_get_hour",1);
date_get_day = $loader.loadprim("std@date_get_day",1);
date_format = $loader.loadprim("std@date_format",2);
date_sub = $loader.loadprim("std@date_sub",2);
date_add = $loader.loadprim("std@date_add",2);
date_delta = $loader.loadprim("std@date_delta",2);
date_compare = $loader.loadprim("std@date_compare",2);
date_set_time = $loader.loadprim("std@date_set_time",2);
date_get_time = $loader.loadprim("std@date_get_time",1);

Date = $new(null);

Date.new = function(f) {
	var o = $new(@Date);
	o.@d = date_new(f.@s);
	return o;
}

Date.now = function() {
	var o = $new(@Date);
	o.@d = date_now();
	return o;
}

Date.new1 = function(d) {
	var o = $new(@Date);
	o.@d = d;
	return o;
}

@Date = $new(null);
@Date.@d = null;

@Date.setTime = function(h,m,s) {
	date_set_hour(this.@d,h,m,s);
};

@Date.setDay = function(y,m,d) {
	date_set_day(this.@d,y,m,d);
}

@Date.getTime = function() {
	return date_get_hour(this.@d);
}

@Date.getDay = function() {
	return date_get_day(this.@d);
}

@Date.format = function(fmt) {
	return String.new(date_format(this.@d,fmt.@s));
}

@Date.sub = function(d) {
	return Date.new1(date_sub(this.@d,d.@d));
}

@Date.add = function(d) {
	return Date.new1(date_add(this.@d,d.@d));
}

@Date.delta = function(d) {
	date_delta(this.@d,d);
}

@Date.compare = function(d) {
	return date_compare(this.@d,d.@d);
}

@Date.toString = function() {
	return String.new(this.__string());
}

@Date.__string = function() {
	return date_format(this.@d,null);
}

@Date.get_time = function() {
	return date_get_time(this.@d);
}

@Date.set_time = function(t) {
	return date_set_time(this.@d,t);
}

$exports.Date = Date;

// ----------------------------------------------------------------------
// Xml

parse_xml = $loader.loadprim("std@parse_xml",3);

fxml = function(parent,name,att) {
	var o = $new(@Xml);
	var f = $objfields(att);

	var i = 0;
	var l = $asize(f);
	while( i < l ) {
		$objset(att,f[i], String.new($objget(att,f[i])) );
		i = i + 1;
	}
	o.att = att;
	o.text = String.new("");
	o.node = String.new(name);
	o.@childs = List.new();
	parent.@childs.add(o);
	return o;
}

fpcdata = function(parent,data) {
	parent.text = String.new(data);
}

Xml = $new(null);

Xml.new = function(s) {
	return parse_xml(s.@s,fxml,fpcdata);
}

@Xml = $new(null);
@Xml.att = null;
@Xml.text = null;
@Xml.node = null;
@Xml.@childs = null;
@Xml.childs = function() {
	return this.@childs;
}

$exports.Xml = Xml;

// ----------------------------------------------------------------------
// Socket

socket_new = $loader.loadprim("std@socket_new",0);
socket_connect = $loader.loadprim("std@socket_connect",3);
socket_send = $loader.loadprim("std@socket_send",2);
socket_receive = $loader.loadprim("std@socket_receive",1);
socket_close = $loader.loadprim("std@socket_close",1);
socket_set_timeout = $loader.loadprim("std@socket_set_timeout",2);

Socket = $new(null);
Socket.new = function() {
	var o = $new(@Socket);
	o.@s = socket_new();
	return o;
}

@Socket = $new(null);
@Socket.@s = null;

@Socket.connect = function(host,port) {
	return socket_connect(this.@s,host.@s,port);
}

@Socket.send = function(data) {
	return socket_send(this.@s,data.@s);
}

@Socket.receive = function() {
	return String.new(socket_receive(this.@s));
}

@Socket.close = function() {
	return socket_close(this.@s);
}

@Socket.set_timeout = function(t) {
	return socket_set_timeout(this.@s,t);
}

$exports.Socket = Socket;

// ----------------------------------------------------------------------
// Math

Math = $new(null);

Math.sqrt = $loader.loadprim("std@math_sqrt",1);
Math.atan = $loader.loadprim("std@math_atan",1);
Math.cos = $loader.loadprim("std@math_cos",1);
Math.sin = $loader.loadprim("std@math_sin",1);
Math.tan = $loader.loadprim("std@math_tan",1);
Math.log = $loader.loadprim("std@math_log",1);
Math.exp = $loader.loadprim("std@math_exp",1);
Math.acos = $loader.loadprim("std@math_acos",1);
Math.asin = $loader.loadprim("std@math_asin",1);
Math.atan2 = $loader.loadprim("std@math_atan2",2);
Math.pow = $loader.loadprim("std@math_pow",2);
Math.abs = $loader.loadprim("std@math_abs",1);
Math.ceil = $loader.loadprim("std@math_ceil",1);
Math.floor = $loader.loadprim("std@math_floor",1);
Math.round = $loader.loadprim("std@math_round",1);
Math.PI = $loader.loadprim("std@math_pi",0)();

$exports.Math = Math;

// ----------------------------------------------------------------------
// File

getcwd = $new(null);
getcwd.ref = $loader.loadprim("std@get_cwd",0);
$exports.getcwd = getcwd;

file_new = $loader.loadprim("std@file_new",2);
file_contents = $loader.loadprim("std@file_contents",1);
file_open = $loader.loadprim("std@file_open",2);
file_close = $loader.loadprim("std@file_close",1);
file_exists = $loader.loadprim("std@file_exists",1);
file_delete = $loader.loadprim("std@file_delete",1);
file_read = $loader.loadprim("std@file_read",2);
file_write = $loader.loadprim("std@file_write",2);
file_path = $loader.loadprim("std@file_path",1);

File = $new(null);

File.new = function(name) {
	var o = $new(@File);
	o.@f = file_new(getcwd.ref(),name.@s);
	return o;
}

@File = $new(null);
@File.@f = null;

@File.contents = function() {
	return String.new(file_contents(this.@f));
}

@File.create = function() {
	return file_open(this.@f,"wb");
}

@File.open = function() {
	return file_open(this.@f,"rb");
}

@File.append = function() {
	return file_open(this.@f,"ab");
}

@File.close = function() {
	return file_close(this.@f);
}

@File.exists = function() {
	return file_exists(this.@f);
}

@File.delete = function() {
	return file_delete(this.@f);
}

@File.read = function(n) {
	return String.new(file_read(this.@f,n));
}

@File.write = function(s) {
	return file_write(this.@f,s.@s);
}

@File.toString = function() {
	return String.new(this.__string());
}

@File.__string = function() {
	return "#file:"+file_path(this.@f);
}

@File.fullPath = function() {
	return String.new(file_path(this.@f));
}

$exports.File = File;

// ----------------------------------------------------------------------
// Random


random_new = $loader.loadprim("std@random_new",0);
random_set_seed = $loader.loadprim("std@random_set_seed",2);
random_int = $loader.loadprim("std@random_int",2);
random_float = $loader.loadprim("std@random_float",1);

Random = $new(null);

Random.new = function() {
	var o = $new(@Random);
	o.@r = random_new();
	return o;
}

@Random = $new(null);
@Random.@r = null;

@Random.setSeed = function(s) {
	return random_set_seed(this.@r,s);
}

@Random.int = function(m) {
	return random_int(this.@r,m);
}

@Random.float = function() {
	return random_float(this.@r);
}

@Random.random = @Random.int;

$exports.Random = Random;

// ----------------------------------------------------------------------
// Std

set_locale = $loader.loadprim("std@set_locale",1);
serialize = $loader.loadprim("std@serialize",1);
unserialize = $loader.loadprim("std@unserialize",2);
sys_command = $loader.loadprim("std@sys_command",1);

Std = $new(null);
Std.print = $print;
Std.int = function(s) {
	if( $typeof(s) == $tobject )
		s = s.__string();
	return $int(s);
}

Std.fieldId = function(s) {
	return $hash(s.@s);
}

Std.fieldName = function(id) {
	return String.new($field(id));
}

Std.fieldCall = function(o,id,params) {
	return $objcall(o,id,params.@a);
}

Std.fields = function(o) {
	var a = $objfields(o);
	var l = $asize(a);
	var i = 0;
	var li = List.new();
	while( i < l ) {
		l.add(a[i]);
		i = i + 1;
	}
	return li;
}

Std.setField = $objset;
Std.field = function(o,f) {
	try {
		return $objget(o,f);
	} catch e {
		return null;
	}
}

std_rnd = random_new();

Std.random = function(m) {
	return random_int(std_rnd,m);
}

Std.rnd = function() {
	return random_float(std_rnd);
}

Std.setLocale = function(l) {
	return set_locale(l.@s);
}

Std.system = function(cmd) {
	return sys_command(cmd.@s);
}

Std.abort = function() {
	$throw("aborted");
}

Std.serialize = function(o) {
	return String.new(serialize(o));
}

Std.unserialize = function(s) {
	try {
		return unserialize(s.@s,$loader);
	} catch e {
		return null;
	}
}

$exports.Std = Std;

// ----------------------------------------------------------------------
