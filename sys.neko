// ----------------------------------------------------------------------
// Dependencies

std = $loader.loadmodule("mtypes/std",$loader);
String = std.String;
Array = std.Array;
Int32 = std.Int32;

// ----------------------------------------------------------------------
// Date

date_new = $loader.loadprim("std@date_new",1);
date_now = $loader.loadprim("std@date_now",0);
date_set_hour = $loader.loadprim("std@date_set_hour",4);
date_set_day = $loader.loadprim("std@date_set_day",4);
date_get_hour = $loader.loadprim("std@date_get_hour",1);
date_get_day = $loader.loadprim("std@date_get_day",1);
date_format = $loader.loadprim("std@date_format",2);

Date = $new(null);

Date.new = function(f) {
	var o = $new(@Date);
	o.@d = date_new(f.@s);
	return o;
}

Date.now = function() {
	var o = $new(@Date);
	o.@d = date_now();
	return o;
}

Date.new1 = function(d) {
	var o = $new(@Date);
	o.@d = d;
	return o;
}

@Date = $new(null);
@Date.@d = null;

@Date.setTime = function(h,m,s) {
	this.@d = date_set_hour(this.@d,h,m,s);
};

@Date.setDay = function(y,m,d) {
	this.@d = date_set_day(this.@d,y,m,d);
}

@Date.getTime = function() {
	return date_get_hour(this.@d);
}

@Date.getDay = function() {
	return date_get_day(this.@d);
}

@Date.format = function(fmt) {
	return String.new(date_format(this.@d,fmt.@s));
}

@Date.sub = function(d) {
	return Date.new1(Int32.sub(this.@d,d.@d));
}

@Date.add = function(d) {
	return Date.new1(Int32.add(this.@d,d.@d));
}

@Date.delta = function(d) {
	this.@d = Int32.add(this.@d,d);
}

@Date.compare = function(d) {
	return Int32.compare(this.@d,d.@d);
}

@Date.toString = function() {
	return String.new(this.__string());
}

@Date.__string = function() {
	return date_format(this.@d,null);
}

@Date.get_time = function() {
	return Int32.to_int(this.@d);
}

@Date.set_time = function(t) {
	this.@d = t;
}

$exports.Date = Date;


// ----------------------------------------------------------------------
// Socket

socket_new = $loader.loadprim("std@socket_new",0);
socket_connect = $loader.loadprim("std@socket_connect",3);
socket_write = $loader.loadprim("std@socket_write",2);
socket_read = $loader.loadprim("std@socket_read",1);
socket_close = $loader.loadprim("std@socket_close",1);
socket_set_timeout = $loader.loadprim("std@socket_set_timeout",2);

host_resolve = $loader.loadprim("std@host_resolve",1);

Socket = $new(null);
Socket.new = function() {
	var o = $new(@Socket);
	o.@s = socket_new();
	return o;
}

@Socket = $new(null);
@Socket.@s = null;

@Socket.connect = function(host,port) {
	socket_connect(this.@s,host_resolve(host.@s),port);
}

@Socket.send = function(data) {
	socket_write(this.@s,data.@s);
}

@Socket.receive = function() {
	return String.new(socket_read(this.@s));
}

@Socket.close = function() {
	socket_close(this.@s);
}

@Socket.set_timeout = function(t) {
	socket_set_timeout(this.@s,t);
}

$exports.Socket = Socket;

// ----------------------------------------------------------------------
// File

file_contents = $loader.loadprim("std@file_contents",1);
file_open = $loader.loadprim("std@file_open",2);
file_close = $loader.loadprim("std@file_close",1);
file_read = $loader.loadprim("std@file_read",4);
file_write = $loader.loadprim("std@file_write",4);
std_file_name = $loader.loadprim("std@file_name",1);

file_name = function(f) {
	if( $typeof(f) == $tstring )
		return f;
	return std_file_name(f);
}

File = $new(null);

File.new = function(name) {
	var o = $new(@File);
	o.@f = name.@s;
	return o;
}

@File = $new(null);
@File.@f = null;

@File.contents = function() {
	return String.new(file_contents(this.@f));
}

@File.create = function() {
	this.@f = file_open(this.@f,"wb");
}

@File.open = function() {
	this.@f = file_open(this.@f,"rb");
}

@File.append = function() {
	this.@f = file_open(this.@f,"ab");
}

@File.close = function() {
	var f = this.@f;
	if( $typeof(f) != $tstring )
		this.@f = std_file_name(f);
	file_close(f);
}

@File.read = function(n) {
	var s = $smake(n);
	var l = file_read(this.@f,s,0,n)
	if( l == n )
		return String.new(s);
	if( l == 0 )
		$throw(String.new("File.read"));
	return String.new( $ssub(s,0,l) );
}

@File.write = function(s) {
	s = s.@s;
	var len = $ssize(s);
	if file_write(this.@f,s,0,len) != len
		$throw(String.new("File.write"));
}

@File.toString = function() {
	return String.new(this.__string());
}

@File.__string = function() {
	return "#file:"+ file_name(this.@f);
}

@File.name = function() {
	return String.new(file_name(this.@f));
}

$exports.File = File;

// ----------------------------------------------------------------------
// Sys

set_locale = $loader.loadprim("std@set_locale",1);
sys_command = $loader.loadprim("std@sys_command",1);
get_cwd = $loader.loadprim("std@get_cwd",0);
set_cwd = $loader.loadprim("std@set_cwd",1);

Sys = $new(null);

Sys.getCwd = function() {
	return String.new(get_cwd());
}

Sys.setLocale = function(l) {
	return set_locale(l.@s);
}

Sys.command = function(cmd) {
	return sys_command(cmd.@s);
}

Sys.setCwd = function(cwd) {
	set_cwd(cwd.@s);
}

Sys.args = function() {
	var a = $args();
	var s = $asize(a);
	var i = 0;
	while( i < s ) {
		a[i] = String.new(a[i]);
		i = i + 1;
	}
	return Array.new1(a);
}

$exports.Sys = Sys;

// ----------------------------------------------------------------------
