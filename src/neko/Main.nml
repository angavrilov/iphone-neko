/*
 *  Neko Compiler
 *  Copyright (c)2005 Nicolas Cannasse
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

var verbose = &false;

function compile(file) {
	if *verbose then printf "Compiling %s\n" file;
	var i = IO.read_file file false;
	var lex = Lexer.create Buffer.create();
	Lexer.input lex file i 1 0;
	var ast = Neko.Parser.parse lex;
	IO.close_in i;
	var code = Neko.Compile.compile ast;
	var o = IO.write_file (Sys.without_extension file + ".n") true;
	Neko.Bytecode.write o code;
	IO.close_out o
}

function dump(file) {
	if *verbose then printf "Dumping %s\n" file;
	var i = IO.read_file file true;
	var code = Neko.Bytecode.read i;
	IO.close_in i;
	var o = IO.write_file (Sys.without_extension file + ".dump") false;
	Neko.Bytecode.dump o code;
	IO.close_out o
}

function report(msg,p) {
	if p == Lexer.null_pos then	{
		Stack.dump IO.stderr Stack.exc();
		IO.printf IO.stderr "Exception : %s\n" msg
	} else
		IO.printf IO.stderr "%s(%d): %s\n" (Lexer.source p,Lexer.line p,msg);
	Sys.exit(-1);
}

try {
	var head = "Neko v1.0 - (c)2005 Nicolas Cannasse\n Usage : neko [options] files...";
	var decl = [
		("-d", Args.String (function(f) { dump f }) , "<file> : dump bytecode");
		("-v", Args.Void (function() { verbose := true }) , ": verbose mode");
	];
	Args.parse head decl (function(f) { compile f });
} catch {
	| Neko.Lexer.Error(msg,pos) -> report Neko.Lexer.error_msg(msg) pos
	| Neko.Parser.Error(msg,pos) -> report Neko.Parser.error_msg(msg) pos
	| Neko.Compile.Error(msg,pos) -> report Neko.Compile.error_msg(msg) pos
	| e -> report string(e) Lexer.null_pos
}
