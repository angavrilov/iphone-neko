
type file

type input {
	mutable in_read : void -> char;
	mutable in_input : string -> int -> int -> int;
	mutable in_close : void -> void;
}

type output {
	mutable out_write : char -> void;
	mutable out_output : string -> int -> int -> int;
	mutable out_close : void -> void;
	mutable out_flush : void -> void;
}

exception Overflow : string;
exception Eof;
exception Closed;
exception Blocked;

/* ----------------------------
	RAW FILE API
------------------------------- */

neko("
	 @load = function(name,nargs) {
		 return $loader.loadprim('std2@'+name,nargs);
	 }
");

var file_open : string -> string -> file = neko("@load('file_open',2)");
var file_close : file -> void = neko("@load('file_close',1)");
var file_read : file -> string -> int -> int -> int = neko("@load('file_read',4)");
var file_read_char : file -> char = neko("@load('file_read_char',1)");
var file_write : file -> string -> int -> int -> int = neko("@load('file_write',4)");
var file_write_char : file -> char -> void = neko("@load('file_write_char',2)");
var file_flush : file -> void = neko("@load('file_flush',1)");

function file_input(f) {
	{
		in_read = function() { file_read_char(f) };
		in_input = file_read f;
		in_close = function() { file_close(f) };
	}
}

function read_file(path,bin) {
	var f = file_open(path,if bin then "rb" else "r");
	file_input f
}

function file_output(f) {
	{
		out_write = file_write_char f;
		out_output = file_write f;
		out_close  = function() { file_close(f) };
		out_flush = function() { file_flush(f) };
	}
}

function write_file(path,bin) {
	var f = file_open(path,if bin then "wb" else "w");
	file_output f
}

var file_stdin : file = neko("load('file_stdin',0)()");
var file_stdout : file = neko("load('file_stdout',0)()");
var file_stderr : file = neko("load('file_stderr',0)()");

var stdin : input = file_input file_stdin;
var stdout : output = file_output file_stdout;
var stderr : output = file_output file_stderr;

/* ----------------------------
	INPUT API
------------------------------- */

function read_char(i) {
	i.in_read()
}

function read_byte(i) {
	ord i.in_read()
}

function input(i,s,p,n) {
	i.in_input s p n
}

function read(i,n) {	
	if n < 0 then invalid_arg();
	if n == 0 then
		""
	else {
		var s = String.create n;
		var p = &0;
		var len = &n;
		while *len > 0 {
			var n = i.in_input s (*p) (*len);
			if n == 0 then throw Blocked; 
			p := *p + n;
			len := *len - n;
		};
		s
	}
}

function read_all(i : input) : string {
	assert();
}

function read_i32(i) : int {
	var ch1 = read_byte i;
	var ch2 = read_byte i;
	var ch3 = read_byte i;
	var ch4 = read_byte i;	
	if ch4 and 128 != 0 then {
		if (ch4 and 64 == 0) then throw Overflow("read_i32");
		ch1 or (ch2 << 8) or (ch3 << 16) or ((ch4 and 127) << 24)		
	} else {
		if (ch4 and 64 != 0) then throw Overflow("read_i32");
		ch1 or (ch2 << 8) or (ch3 << 16) or (ch4 << 24)
	}
}

function read_ui16(i) {
	var ch1 = read_byte i;
	var ch2 = read_byte i;
	ch1 or (ch2 << 8)
}

function read_i16(i) {
	var ch1 = read_byte i;
	var ch2 = read_byte i;
	var n = ch1 or (ch2 << 8);
	if ch2 and 128 != 0 then
		n - 65536
	else
		n
}

function close_in(ch) {
	ch.in_close();
	ch.in_read := function() { throw Closed };
	ch.in_input := function(s,p,l) { throw Closed };
	ch.in_close := function() { throw Closed };
}

/* ----------------------------
	OUTPUT API
------------------------------- */

function write_char(ch : output, x : char) : void {
	assert()
}

function write_byte(ch : output, x : int) : void {
	assert()
}

function output(ch,s,p,n) {
	ch.out_output s p n
}

function write(ch : output,x : string) : void {
	assert()
}

function write_i32(ch : output, x : int) : void {
	assert()
}

function write_ui16(ch : output, x : int) : void {
	assert()
}

function write_i16(ch : output, x : int) : void {
	assert()
}

function flush(ch) {
	ch.out_flush();
}

function close_out(ch) {
	ch.out_close();
	ch.out_flush := function() { throw Closed };
	ch.out_write := function(_) { throw Closed };
	ch.out_output := function(_,_,_) { throw Closed };
	ch.out_close := function() { throw Closed };
}

function printf(ch : output, fmt : 'a format, p : 'a ) : void {
	assert();
}

