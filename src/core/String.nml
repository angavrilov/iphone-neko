
neko("
	 @string_split = $loader.loadprim('std@string_split',2);
");

function make(size : int, c : char) : string {
	neko("
		var s = $smake(size);
		var i = 0;
		while( i < size ) {
			$sset(s,i,c);
			i = i + 1;
		}
		s
	");
}

var create : int -> string = neko("$smake");
var length : string -> int = neko("$ssize");

function get(s : string,n : int) : char {
	var c = neko("$sget(s,n)");
	if c == neko("null") then invalid_arg();
	c
}

function set(s : string, n : int, c : char) : void {
	if neko("$sset(s,n,c) == null") then invalid_arg();
}

function blit(dst : string, p : int, src : string, p2 : int, l : int ) : void {
	if neko("$sblit(dst,p,src,p2,l) == null") then invalid_arg();
}

function sub(s : string, p : int, l : int ) : string {
	var s = neko("$ssub(s,p,l)");
	if s == neko("null") then invalid_arg();
	s
}

var list_depency = List.iter

function split( s : string, sub : string ) : string list {
	neko("
		var l = @string_split(s,sub);
		return @List.@make(l);
	");
}

function concat( sep : string, s : string list ) : string {
	var b = Buffer.create();
	function rec loop(l) {
		match l {
		| [] -> ()
		| [x] -> Buffer.add b x
		| x :: l -> 
			Buffer.add b x;
			Buffer.add b sep;
			loop l
		}
	};
	loop(s);
	Buffer.string b
}
